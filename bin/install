#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=../lib/envs.bash
. "${plugin_dir}/lib/envs.bash"

function fail() {
	printf "* ERROR: asdf-%s %s\\n" "$TOOL_NAME" "$*"
	exit 1
}

# download & install
(
	# if not asdf version with asdf_download_path then call download script here
	if [ -z "${ASDF_DOWNLOAD_PATH:-}" ]; then
		tmp_download_dir=$(mktemp -d -t 'asdf_firebase_XXXXXX')
		trap 'rm -rf "${tmp_download_dir}"' EXIT
		printf "* run download script for older version of asdf"
		export ASDF_DOWNLOAD_PATH="${tmp_download_dir}"

		# download
		bash "$(dirname "$0")/download"
	fi

	mkdir -p "${ASDF_INSTALL_PATH}/bin"
	cp "${ASDF_DOWNLOAD_PATH}/firebase" "${ASDF_INSTALL_PATH}/bin"
	printf "* Moved to %s\\n" "$ASDF_INSTALL_PATH"
	chmod +rx "${ASDF_INSTALL_PATH}/bin/firebase"

	printf "* Testing if %s@%s is executable\\n" "$TOOL_NAME" "$ASDF_INSTALL_VERSION"
	tool_cmd="$(printf "%s\\n" "$TOOL_TEST" | cut -d' ' -f1)"
	test -x "$ASDF_INSTALL_PATH/bin/$tool_cmd" || fail "Expected $ASDF_INSTALL_PATH/bin/$tool_cmd to be executable."
	printf "* Success! %s@%s is ready for use.\\n" "$TOOL_NAME" "$ASDF_INSTALL_VERSION"
) || (
	rm -rf "$ASDF_INSTALL_PATH"
	fail "An error ocurred while installing $TOOL_NAME@$ASDF_INSTALL_VERSION"
)
